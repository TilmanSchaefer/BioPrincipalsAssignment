---
title: "Assignment"
author: "Tilman Schaefer 23206466"
format: pdf
editor: visual
---


```{r}
#| echo: false
#| warning: false
#| message: false

if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")

# Install DeSeq2

#BiocManager::install("DESeq2")
#BiocManager::install("clusterProfiler")

library(clusterProfiler)
library(DESeq2)
library(vidger)

current_wd = getwd()
filename_dataset = paste(current_wd, "brca_tcga_pan_can_atlas_2018.tar.gz", sep = "/")

#untar(filename_dataset)
setwd("brca_tcga_pan_can_atlas_2018")

# Read the RNASeq file: data_mrna_seq_v2_rsem.txt
data_Rnaseq = read.delim("data_mrna_seq_v2_rsem.txt")

#colnames(data_Rnaseq)

# Read the Patient Data file: data_clinical_patient.txt

data_patient = read.delim("data_clinical_patient.txt")

#col_age = which(colnames(data_patient) =="Diagnosis.Age")

# Read the Copy Number Aberrations Data: data_cna.txt
data_cna = read.delim("data_cna.txt")


# Match the RNASeq patient ids with the CNA ids and the Patient Data ids.
map_func <- function(value){
  paste(gsub("-", ".", value),".01", sep = "")
}

tmp <- lapply(data_patient$X.Patient.Identifier, map_func)
data_patient$X.Patient.Identifier <- tmp

# Create metadata using the CNA level of ERBB2+ (greater than 0 means amplified).

assay = as.matrix(data_Rnaseq[,-c(1,2)])
metadata = matrix(0, dim(assay)[2],1)

colnames(data_patient)[1]

#patient_ids = data_patient[5:nrow(data_patient),1]
patient_ids = as.list(colnames(data_cna)[3:ncol(data_cna)])

row_erbb2 = which(data_cna[,1] == "ERBB2")

# Populate metadata with patient IDs
# NB: there seems to be a discrepancy between the number of entries for the
# patient data in the different data files. data_cna has 1070 entries whereas
# data_Rnaseq has 1082.

for (i in 1:dim(assay)[2]){
  patient_barcode = colnames(assay)[i]
  idx = which(patient_barcode == patient_ids)
  # For some patients there is no entry in the CNA table so
  # we check for idx to be valid
  if(!identical(idx, integer(0))) {
    metadata[i,1] = 1*(as.numeric(data_cna[row_erbb2, idx + 2 ])>0)
  }
}
metadata[is.na(metadata)] =0
colnames(metadata) = "ERBB2"

# Build DESeq Object

assay[is.na(assay)] = 0  # Impute with zeros the NA
assay[assay<0] = 0

dds <- DESeqDataSetFromMatrix(countData = round(assay),
                              colData = metadata,
                              design = ~ ERBB2)

# Filter

smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]

# Normalize

dds <- DESeq(dds)

res <- results(dds)
plotCounts(dds, which.min(res$pvalue), intgroup ="ERBB2", returnData=TRUE )
# Summary

summary(res)
rownames(res) = data_Rnaseq[keep,1]
head(res[order(res$pvalue),])

# Significantly Differentially Expressed

signif = which(res$padj<0.05)
deg = res[signif,]



# Separate them 
dup = deg[deg[,2]>0.,]

ddown = deg[deg[,2]<0.,]

# For Pathway Enrichment we need Entrez IDs
entrez_all = data_Rnaseq[keep[signif],2]
entrez_up = data_Rnaseq[keep[signif[deg[,2]>0.]],2]
entrez_down = data_Rnaseq[keep[signif[deg[,2]<0.]],2]
# Do a KEGG pathway over-representation analysis

all_paths =   enrichKEGG(gene = entrez_all, organism = 'hsa', pvalueCutoff = 0.05)
#head(all_paths)

# Transform the data to visualize
rld <- vst(dds, blind=FALSE)

# Do Principal Components Analysis
pc = prcomp(assay(rld))

# Plot 
#plot(pc$rotation[,1], pc$rotation[,2], col = 1+(metadata), pch = 19)
#plotPCA(rld, intgroup = "ERBB2")

```


## Background

According to the International Agency for Resarch on Cancer, breast cancer is the most common cancer overall, accounting for about 12% of all cancer cases. In approx. 20% of invasive breast cancers the ERBB2 oncogene is overexpressed, which has also been linked to the promotion of breast cancer invasion and metastasis, resulting in poor patient survival (https://www.intechopen.com/chapters/53690).

While the overexpression of ERBB2 has been established as a reliable biomarker for the diagnosis, treatment and prognosis of breast cancer, many of the underlying processes such as tumor progression and resistance to treatment are still not well understood. It is therefore important to understand the factors that contribute to therapy resistance of ErbB2-positive breast cancer tumors and to identify other genetic or transcriptomic factors in order to identify novel therapeutic strategies to overcome resistance.

In this study I am going to investigate whether and what other genes are overexpressed in patients with ERBB2+ breast cancer. This could
provide insights into other contributing factors that promote/supress tumor progression or enhance/inhibit therapy resistance, ultimately leading to a better understanging and the development of alternative therapy targets.



## Methods

For this investigation I performed a differential gene expression analysis of patients with BRCA, using the DESeq2 R-package from BiocManager. The patient data was obtained from ... and contains a dataset with about 1080 observations. For the analysis I divided the patients into two groups, one group with an amplified level of ERBB2 (CNA level > 0) and the other one with an expression level <= 0. 
A KEGG Enrichment Analysis was subsequently performed using the clusterProfiler library from BiocManager. Lastly, I performed a Principal Component Analysis.

## Results


### Data preparation


```{r}
#| echo: false
#| warning: false
#| message: false

library(ggplot2)
library(knitr)

counts = plotCounts(dds, which.min(res$pvalue), "ERBB2", returnData=TRUE)

# counts_0 = data.frame(cnt = counts$count[counts$ERBB2 == 0])
# counts_1 = data.frame(cnt = counts$count[counts$ERBB2 == 1])
# 
mean0 = mean(counts$count[counts$ERBB2 == 0])
mean1 = mean(counts$count[counts$ERBB2 == 1])
count_means = data.frame(mean= c(mean0, mean1), ERBB2 = c(0,1))
# ggplot() +
#   geom_freqpoly(mapping = aes(x = cnt) , data = counts_0, binwidth = 100) +
#   geom_freqpoly(mapping = aes(x = cnt) , data = counts_1, binwidth = 100, color = "red") +
#    xlim(0, 10000)
# 
# ggplot() +
#   geom_dotplot(mapping = aes(x = cnt) , data = counts_0)
# 
ggplot(counts,  aes(x=as.factor(ERBB2), y = count)) +
   geom_point() +
   geom_point(
    mapping = aes(y = mean), data = count_means,
    colour = 'red', size = 3
  ) + 
  ylim(0,100000) +
  xlab("ERBB2 amplified")


```

Table @tab-top10-results shows the result of the DGE analysis by listing the
top 10 genes with the highest deviation of the log2 fold change value.


``` {r}
#| echo: false
#| warning: false
#| message: false
#| label: tab-top10-results
#| tab-cap: Top 10 differentiated genes

kable(head(res[order(res$log2FoldChange),], n = 10),
           caption = "Top 10 differentiated genes")
```


``` {r}
#| echo: false
#| warning: false
#| message: false
#| label: tab-top5-paths
#| tab-cap: Top 5 paths

kegg_top5 = head(all_paths, n = 5)
kegg_top5$geneID = NULL
kegg_top5$BgRatio = NULL
kegg_top5$ID = NULL
kegg_top5$qvalue = NULL

kable(head(kegg_top5, n = 10),
           caption = "Top 10 paths")
```

### PCA

``` {r}
#| echo: false
#| warning: false
#| message: false


plotPCA(rld, intgroup = "ERBB2")
#plot(pc$rotation[,2], pc$rotation[,1], col = 1+(metadata), pch = 19)

```




